{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"PHP-Benchmark\r\n=============\r\n\r\nThis library contains classes used to compare algorithms and benchmark your application.\r\n\r\n## Benchmarking\r\n\r\n### Setup\r\n\r\n1. Either [download](https://github.com/victorjonsson/PHP-Benchmark/archive/master.zip) the library to your server or \r\ninstall it in your project using [composer](http://getcomposer.org/)\r\n2. Include the file init.php in the very beginning of the first file that receives the request to your\r\napplication (this is usually index.php). Then load the address of your website in the browser with the \r\nquery parameters `php-benchmark-test=1&display-data=1` and the benchmark data will be displayed in the upper left corner\r\nof your website.\r\n\r\n![Becnhmark 1](http://victorjonsson.github.com/PHP-Benchmark/sc-1.png)\r\n\r\n#### Taking snapshots\r\n\r\nIf you want to take snapshots from the benchmark data during the request you may do so by adding the following code.\r\n\r\n```php\r\n \\PHPBenchmark\\Monitor::instance()->snapshot('Bootstrap finished');\r\n````\r\n\r\nInserting some snapshots in the source code of WordPress gave me the following benchmark data\r\n\r\n![Becnhmark 1](http://victorjonsson.github.com/PHP-Benchmark/sc-2.png)\r\n\r\n\r\n### Stress test using command line (nodejs)\r\n\r\nBy using the (nodejs) command line tool you'll get information about average memory peaks and time spent on page \r\ngeneration. The test will do a number of requests to your application with a query parameter\r\nthat tells the benchmark script to monitor the time and memory consumption during the request. When all requests\r\nis finished you will get the following information:\r\n\r\n - Average time spent on generating the page\r\n - Average memory peak\r\n - Average number of included files\r\n - Average number of declared classes\r\n - The highest memory peak monitored during the test\r\n - The highest time spent on generating the page during the test\r\n - The number of failed requests (timeout or http status other then 200)\r\n\r\n\r\nFirst of all you need to [install node](http://nodejs.org/#download) if you haven't already. After that you have installed node you have to\r\ndownload the [nodejs script](https://raw.github.com/victorjonsson/PHP-Benchmark/master/php-benchmark) to your server, name\r\nthe file *php-benchmark*. Then navigate to the directory where your nodejs script is located and run one of the \r\nfollowing commands:\r\n\r\n`$ node php-benchmark http://mywebsite.com/` Will do a benchmark test with 50 requests that gives you average page generation time, memory peak,\r\nnumber of loaded classes and included files.\r\n\r\n`$ node php-benchmark http://mywebsite.com/ -n 500` Will do a benchmark test with 500 requests.\r\n\r\n`$ node php-benchmark http://mywebsite.com/ -s 20` Will start 20 requests per second until all requests is\r\nmade. If you're doing this test to monitor the performance of your PHP code\r\n(rather then load testing your server infrastructure) and having limited server resources it might be good to set this \r\noption as low as 1-2 requests per second.\r\n\r\n`$ node php-benchmark http://mywebsite.com/ -nu` Will prevent the use of unique URL:s when requesting the application.\r\n\r\n`$ node php-benchmark http://mywebsite.com/ -v` If a lot of the request fails it might be good to add *-v* to get more information about the failing requests.\r\n\r\n`$ node php-benchmark http://mywebsite.com/ -f /var/log/` Will write ouput to log file in /var/log/.\r\n\r\n`$ node php-benchmark http://mywebsite.com/ -f test.log` Will write ouput to log file test.log in current working directory.\r\n\r\n*All options can of course be used together as well, these commands are only simple examples.*\r\n\r\n## Comparing algorithms\r\n\r\n### Setup (manually)\r\n\r\n[Download](https://github.com/victorjonsson/PHP-Benchmark/archive/master.zip) the library to your server. After that all\r\nyou have to do is to  include the file `lib/autoload.php` to be able to load the classes you want to use.\r\n\r\n### Setup (composer)\r\n\r\nNot so much you need to do, add the dependency \"phpbenchmark/phpbenchmark\" to composer.json and your'e set to go.\r\n\r\n### Example code\r\n\r\n```php\r\n\r\nrequire __DIR__.'/vendor/autoload.php';\r\n\r\nuse \\PHPBenchmark\\FunctionComparison;\r\n\r\nFunctionComparison::load()\r\n    ->setFunctionA('stream_resolve_include_path', function() {\r\n        $bool = stream_resolve_include_path(__FILE__) !== false;\r\n    })\r\n    ->setFunctionB('file_exists', function() {\r\n        $bool = file_exists(__FILE__);\r\n    })\r\n    ->exec();\r\n\r\n```\r\n\r\nLoad a file having this code in the browser or call it via command line and you will find out that `stream_resolve_include_pate` wins\r\nthe game, being about 30-35% faster.\r\n\r\n\r\n### Extending AbstractFunctionComparison \r\n\r\nIf you would want to manage a large collections of tests you can create a class (extending [AbstractFunctionComparison](https://github.com/victorjonsson/PHP-Benchmark/blob/master/lib/PHPBenchmark/AbstractFunctionComparison.php))\r\nfor each test. Put all classes in the same directory and call `FunctionComparison::runTests( $path_to_class_directory )` and \r\nyou'll be able to execute all tests in one request.\r\n\r\n","name":"Php-benchmark","google":"","tagline":"Easy to use benchmark script for your PHP-application. Get information about average loading time, memory consumption and more..."}